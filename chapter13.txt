# 13 메서드 (Methods)
> Translator : 북극산펭귄 (say8425@gmail.com)

#Methods

메서드Method는 타입type에 의존적인 함수입니다. 모든 클래스와 구조체 그리고 이너멀레이션Enumeration은, 타입이 정해진 인스턴스Instance가 수행하는 작업을 캡슐화하는 인스턴스 메소드를 정의 할 수 있습니다. 또한 타입 자체에 관여하는 타입 메소드를 정의 할 수 있습니다. 이 타입 메소드는 오브젝티브-C에서의 클래스Class Method와 유사합니다.

##Instance Methods

인스턴스 메소드Instance Method는 특정 클래스, 구조체 혹은 이너멀레이션의 인스턴스에 속하는 함수입니다. 이것은 인스턴스 속성에 접근하고 수정하는 방법이나, 인스턴스의 용도에 관련된 기능을 지원합니다. `함수섹션`에서 설명된대로 인스턴스 메소드는 특히 함수와 동일한 문법을 가집니다.

여러분은 인스턴스 메소드를 해당 타입이 속한 괄호내에서 작성합니다. 인스턴스 메소드는 다른 인스턴스 메소드와 해당 타입의 속성에 대한 암시적 권한Implict access을 가지고 있습니다. 인스턴스 메소드는 오직 해당 타입이 속한 특정한 인스턴스에 의해서만 호출 될 수 있습니다. 이것은 속해있는 인스턴스 없이 독립적으로 호출 될 수 없습니다.

여기 작업을 수행한 횟수를 세는, 카운터`Counter`클래스를 정의한 간단한 예제가 있습니다:


	class Counter {
		var count = 0
		func increment() {
			count++
		}
		func incrementBy(amount: Int) {
			count += amount
		}
		func reset() {
			count = 0
		}
	}


이 `Counter`클래스는 세가지 인스턴스 메소드를 정의합니다. 


 
* `increment` 1만큼 counter를 증가시킵니다.
* `incrementBy(amount: Int)` 특정한 정수값만큼 counter를 증가시킵니다.
* `reset` counter를 0으로 재설정합니다.

또한 `Counter`클래스는 현재 카운터 값을 추적하기 위해 변수 프로퍼티Property count를 선언하였습니다.

당신은 프로퍼티와 같은 점 문법으로 인스턴스 메소드를 호출합니다:

	let counter = Counter()
	// 초기 counter값은 0입니다
	counter.increment()
	// counter값은 이제 1입니다
	counter.incrementBy(5)
	// counter값은 이제 6입니다
	counter.reset()
	// counter값은 이제 0입니다
