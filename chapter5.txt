# 05 문자열과 문자 (Strings and Characters)
> Translator : 해탈 (kimqqyun@gmail.com)

# 문자열과 문자 (Strings and Characters)

문자열은 `"hello, world"` 또는 `"albatross"` 와 같은 문자의 컬렉션입니다. Swift 문자열을 차례로 문자 타입을 컬렉션 값으로 표시됩니다. 

Swift 문자열 및 문자 타입은 텍스트로 작업하는 유형에서 유니코드 호환방법을 빠르게 제공합니다. 문자 생성 및 조작을 위한 구문은 C 문자열과 유사한 구문을 사용하여 가볍게 읽을 수 있습니다. 문자열 연결은 `+` 연산자와 함께 두 문자열을 추가하는 것만 만큼 간단하고 문자열의 가변성은 Swift의 다른 값과 상수나 변수 그리고 다른 값들의 선택에 의해 관리됩니다.

Swift의 문자열 유형은 빠르고 현대적인 구현에도 불구하고 문법이 단순합니다. 모든 문자열 인코딩이 독립적인 유니코드 문자로 구성, 다양한 유니코드 표현에 액세스 하기위한 지원을 제공합니다.

문자열 삽입 과정에서 상수, 변수, 리터럴 및 긴 문자열을 삽입 할수 있습니다. 이것은 사용자 정의 문자열값 만들어서 보여주거나 저장하기를 쉽게 할 수 있습니다.


> NOTE
>
> Swift의 문자열 타입은 Foundation의 NSString 클래스에 연결됩니다. 당신은 Cocoa 또는 Cocoa Touch의 Foundation 프레임워크로 작업하는 경우 NSString의 API를 이용하여 문자열 값 호춣이 만드는 것이 가능하며 또한 이 장에서 설명한 문자열 기능도 사용가능합니다. 또한 NSString의 API 인스턴스를 필요로 하는 문자열 값도 사용가능합니다.
>
>Foundation 과 Cocoa 에 대한 자세한 정보는 _Using Swift With Cocoa and Objective-C_ 를 참조하십시오 // 이탤릭체

## 문자열 리터럴

코드 내에서 미리 정의된 문자열값인 리터럴등을 포함할 수 있습니다. 문자열 리터럴이란 큰 따옴표로 둘라싸인 텍스트 문자의 고정된 순서입니다.

문자열 리터럴은 상수나 변수의 초기 값을 제공하는것에 사용될 수 있습니다.
```
let someString = "Some string literal value"
```

Swift는 초기화된 문자열 리터럴 값으로 `someString` 상수에 대한 문자열의 형식을 유추합니다. 

문자열 리터럴은 다음과 같은 특수 문자를 포함 할 수 있습니다.

- 이스케이프 특별 문자 `\0` (null 문자), `\\` (백슬래시), `\t` (수평 탭), `\n` (줄 바꿈), `\r` (캐리지 리턴), `\"` (큰 따옴표), `\'` (작은 따옴표)
- 1바이트 유니코드 스칼라는 `\xnn` 이며 `nn`은 두개의 16진수 숫자입니다.
- 2바이트 유니코드 스칼라는 `\unnnn` 이며 `nnnn`은 4개의 16진수 숫자입니다.
- 4바이트 유니코드 스칼라는 `\Unnnnnnnn` 이며 `nnnnnnnn`은 8개의 16진수 숫자입니다.

아래의 코드는 여러 종류의 특수문자의 예를 나타냅니다.
`wiseWords` 상수는 두개의 이스케이프 문자가 포함되어 있습니다. `dollarSign` 과 `blackHeart` 및 `sparklingHeart` tkdtnsms 세가지 유니코드 스칼라 문자 형식을 보여줍니다.

```
let wiseWords = "\"Imagination is more important than knowledge\" - Einstein"
// "Imagination is more important than knowledge" - Einstein
let dollarSign = "\x24"        // $,  Unicode scalar U+0024
let blackHeart = "\u2665"      // ♥,  Unicode scalar U+2665
let sparklingHeart = "\U0001F496"  // 💖, Unicode scalar U+1F496
```

## 빈 문자의 초기화 (Initializing an Empty String)

긴 문자 열을 만들기 위한 포인트를 위해 빈 문자열 값을 만들려면 빈 문자열 리터럴을 변수에 할당하거나 초기화 문법을 사용하여 새 문자열 인스턴스를 초기화합니다.

```
var emptyString = ""               // 빈 문자열 리터럴
var anotherEmptyString = String()  // 초기화 문법
// 두 문자열 모두 비어있으며 서로 똑같다.

```

`isEmpty`의 불리언 속성을 체크하여 문자열 값이 비어있는지 여부를 확인할 수 있습니다.
```
if emptyString.isEmpty {
    println("여기엔 아무것도 보이지 않습니다.")
}
// prints 여긴 아무것도 보이지 않습니다."
```

## 문자열 가변성

특정 문자열을 변수에 할당하여(수정될 수 있는 경우) 수정(또는 변경)할 수 있는지를 나타내거나 상수(수정될 수 없는 경우)를 말합니다.
```
var variableString = "Horse"
variableString += " and carriage"
// variableString 은 "Horse and carriage" 입니다.

let constantString = "Highlander"
constantString += " and another Highlander"
// 컴파일 에러 - 상수 문자열은 변경될 수 없습니다.
```

> NOTE
> 이 방법은 Objective-C 또는 Cocoa에서 다른 방법으로 접근하는데 문자열이 변경될수 있는지 여부를 나타내기 위해 두 개의 클래스 (NSString 또는 NSMutableString) 사이에서 선택할 수 있습니다.

## 문자열 값 타입 (Strings Are Value Types)

Swift의 문자열 타입은 값 타입닙니다. 새 문자열 값을 만드는 경우에 상수 또는 변수에 할당되면 그 문자열 값이 함수나 메소드에 전달 될때 복사 됩니다. 각각의 경우에 기존의 문자열 값의 새 복사본이 전달되거나 복사되며 이는 원래의 버전이 아닙니다. 값 타입은 Structurs and Enumerations Are Value Types를 참조하십시오. // 링크

>NOTE
>
>이 동작은 Cocoa에 있는 NSString 과는 다릅니다. Cocoa에 있는 NSString 인스턴스를 생성할때와 함수나 메소드에 전달하거나 변수에 할당 및 전달될때 동일한 단일 NSString에 대한 참조를 할당합니다. 특별히 요청하지 않는 한 문자열에 대해 어떠한 복사는 수행되지 않습니다.

Swift의 문자열 기본 복사 동작(copy-by-default)은 문자열 값이 함수나 메소드에의해 수행될때 어디에서 오는지 상관 없이 정확한 문자열 값을 소유하고 깨끗한지 확인합니다.스스로 수정하지 않는한 전달된 문자열이 수정되지 않는다는것을 보장합니다. 

내부적으로 Swift의 컴파일러는 실제 복사가 반드시 필요한 경우에만 발생하도록 최적화하고있습니다. 이 뜻은 문자열로 작업할때 항상 좋은 성능을 의미합니다.

## 문자와 작업하기 (Working with Charaters)

Swift의 문자열 타입은 지정된 순서로 문자 값의 컬렉션을 타나냅니다. 각 문자의 값은 하나의 유니코드 문자를 나타냅니다. 각 문자에 대해 for-in 루프의 문자 반복을 사용하여 각각의 문자의 값에 접근할 수 있습니다.

```
for character in "Dog! " // 개 특수문자 {
	println(character)
}
// D
// o
// g
// !
// 개 특수문자
```

for-in 루프에 대해서는 For Loops 를 참조하십시오 // 링크

그 대신에 문자 형식 주석을 제공하여 단일 문자열 리터럴에서 톡립(stand-alone) 문자 상수나 변수를 만듭니다.

```
let yenSign: Character = "¥"
```

## 문자 세기 (Counting Characters)
문자열의 문자의 수를 검색하려면 전역 함수인 countElements를 호출하여 함수의 유일한 매개변수인 문자열을 전달합니다.

```
let unusualMenagerie = "Koala , Snail , Penguin , Dromedary"
println("unusualMenagerie has \(countElements(unusualMenagerie)) characters")
// prints "unusualMenagerie has 40 characters"
```

> NOTE
>
> 다른 유니코드 문자와 같은 유니코드 문자의 다른 표현은 메모리의 저장된 다른 양을 필요로 할 수 있습니다. 이때문에 Swift의 문자는 각 문자의 표현에서 동일한 양의 메모리를 차지하지 않습니다. 결과에 따라 문자열의 길이는 차례로 그 문자의 각각 반복하지 않고는 계산될 수 없다. 당신이 특히 긴 문 자열 값으로 작업하는 경우 `CountElements` 기능이 해당 문자열에 대한 정확한 글자수를 계산하기 위해 문자열에서 문자 세기를 반복해야한다는 것을 인식해야합니다.
>
>또한 `countElements`에 의해 반환된 문자수는 항상 같은 문자가 포함되어있는 `NSSString` 의 길이 속성과 동일하지 않습니다. 길이는 `NSString`을 기초로한 문자열 UTF-16 표현내의 16비트 유닛 숫자에 기반하고 문자열에서 유니코드 문자의 수에 기반하지는 않습니다.
이 사실을 반영하기 위해 길이 속성은 Swift가 `NSString` 문자열 값에 접근할때 `utf16count` 라고 합니다.

## 문자열 및 문자 합치기

문자열 및 문자를 덧셈 연산자(`+`)와 함께 추가하여 새로운 문자열(또는 연결된) 값을 만들 수 있습니다.

```
let string1 = "hello"
let string2 = "there"
let character1: Character = "!"
let character2: Character = "?"

let stringPlusCharacter = string1 + character1        // equals "hello!"
let stringPlusString = string1 + string2              // equals "hello there"
let characterPlusString = character1 + string1        // equals "!hello"
let characterPlusCharacter = character1 + character2  // equals "!?"
```
또한 덧셈할당연산자(+=)로 기존의 문자열 변수에 문자열이나 문자 값을 추가할 수 있습니다.
```
var instruction = "look over"
instruction += sting2
// instriction 은 "look over there" 와 같습니다.

var welcome = "good mornig"
welcome += character1
// welcome 은 "good morning!" 과 같습니다.
```

> NOTE
>
> 문자 값은 하나의 문자만을 포함해야만 하기 떄문에 기존의 문자변수에 문자열이나 문자를 추가 할 수 없습니다.

## 문자열 삽입

문자열 삽입은 상수, 변수, 리터럴 그리고 표현식의 혼합을 이용, 문자열 안에 문자 값을 포함하여 새로운 문자열 값을 만드는 방법입니다. 문자열 리터럴에 삽입된 각 항목은 백슬래시가 앞에 한 쌍의 괄호로 싸여있습니다.
```
let multiplier = 3
let message = "\(multiplier) times 2.5 is \(Double(multiplier) * 2.5)"
// message is "3 times 2.5 is 7.5"
```
위의 예에서 `multiplier`의 값은 `\(multiplier)` 문자열 리터럴로 삽입됩니다. 이 플레이스 홀더는 실제 문자열 삽입이 평가(evaluate)될때 `multiplier`의 실제 값으로 치환됩니다.

`multiplier`의 값은 큰 문자열 표현식의 후의 일부입니다. 이 표현식은 `Double(mutiplier) * 2.5` 의 값을 계산하고 문자열로 결과 (`7.5`)를 삽입합니다. 이 경우에 문자열 리터럴 내부에 포함된 경우 표현은 `\(Double(multiplier) * 2.5)`로 기록됩니다.


> NOTE
>
> 문자열에 삽입된 괄호안에 쓰는 표현으로 이스케이프 큰 따옴표 (`"`) 또는 백 슬래시(`\`)와 캐리지 리턴 및 줄바꿈을 포함할 수 없습니다.

## 문자열 비교
Swift는 문자열 값을 비교하는 세가지 방법을 제공합니다 : 문자열 같음, 접두사 같음, 접미사 같음 // 디스커션에 올림

### String Equality 
두개의 문자열 값이 동일한 순서로 포함되어 있는 경우 두개의 문자열 값이 동일한 것으로 간주됩니다.

```
let quotation = "We're a lot alike, you and I."
let sameQuotation = "We're a lot alike, you and I."
if quotation == sameQuotation {
	pinrtln("These two strings are considered equal")
}
// prints "These two strings are considered equal"
```



