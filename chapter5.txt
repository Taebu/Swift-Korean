# 05 문자열과 문자 (Strings and Characters)
> Translator : 해탈 (kimqqyun@gmail.com)

# 문자열과 문자 (Strings and Characters)

문자열은 `"hello, world"` 또는 `"albatross"` 와 같은 문자의 컬렉션입니다. Swift 문자열을 차례로 문자 타입을 컬렉션 값으로 표시됩니다. 

Swift 문자열 및 문자 타입은 텍스트로 작업하는 유형에서 유니코드 호환방법을 빠르게 제공합니다. 문자 생성 및 조작을 위한 구문은 C 문자열과 유사한 구문을 사용하여 가볍게 읽을 수 있습니다. 문자열 연결은 `+` 연산자와 함께 두 문자열을 추가하는 것만 만큼 간단하고 문자열의 가변성은 Swift의 다른 값과 상수나 변수 그리고 다른 값들의 선택에 의해 관리됩니다.

Swift의 문자열 유형은 빠르고 현대적인 구현에도 불구하고 문법이 단순합니다. 모든 문자열 인코딩이 독립적인 유니코드 문자로 구성, 다양한 유니코드 표현에 액세스 하기위한 지원을 제공합니다.

문자열 삽입 과정에서 상수, 변수, 리터럴 및 긴 문자열을 삽입 할수 있습니다. 이것은 사용자 정의 문자열값 만들어서 보여주거나 저장하기를 쉽게 할 수 있습니다.


> NOTE
>
> Swift의 문자열 타입은 Foundation의 NSString 클래스에 연결됩니다. 당신은 Cocoa 또는 Cocoa Touch의 Foundation 프레임워크로 작업하는 경우 NSString의 API를 이용하여 문자열 값 호춣이 만드는 것이 가능하며 또한 이 장에서 설명한 문자열 기능도 사용가능합니다. 또한 NSString의 API 인스턴스를 필요로 하는 문자열 값도 사용가능합니다.
>
>Foundation 과 Cocoa 에 대한 자세한 정보는 Using Swift With Cocoa and Objective-C 를 참조하십시오 // 이탤릭체

## 문자열 리터럴

코드 내에서 미리 정의된 문자열값인 리터럴등을 포함할 수 있습니다. 문자열 리터럴이란 큰 따옴표로 둘라싸인 텍스트 문자의 고정된 순서입니다.

문자열 리터럴은 상수나 변수의 초기 값을 제공하는것에 사용될 수 있습니다.
```
let someString = "Some string literal value"
```

Swift는 초기화된 문자열 리터럴 값으로 `someString` 상수에 대한 문자열의 형식을 유추합니다. 

문자열 리터럴은 다음과 같은 특수 문자를 포함 할 수 있습니다.

- 이스케이프 특별 문자 `\0` (null 문자), `\\` (백슬래시), `\t` (수평 탭), `\n` (줄 바꿈), `\r` (캐리지 리턴), `\"` (큰 따옴표), `\'` (작은 따옴표)
- 1바이트 유니코드 스칼라는 `\xnn` 이며 `nn`은 두개의 16진수 숫자입니다.
- 2바이트 유니코드 스칼라는 `\unnnn` 이며 `nnnn`은 4개의 16진수 숫자입니다.
- 4바이트 유니코드 스칼라는 `\Unnnnnnnn` 이며 `nnnnnnnn`은 8개의 16진수 숫자입니다.

아래의 코드는 여러 종류의 특수문자의 예를 나타냅니다.
`wiseWords` 상수는 두개의 이스케이프 문자가 포함되어 있습니다. `dollarSign` 과 `blackHeart` 및 `sparklingHeart` tkdtnsms 세가지 유니코드 스칼라 문자 형식을 보여줍니다.

```
let wiseWords = "\"Imagination is more important than knowledge\" - Einstein"
// "Imagination is more important than knowledge" - Einstein
let dollarSign = "\x24"        // $,  Unicode scalar U+0024
let blackHeart = "\u2665"      // ♥,  Unicode scalar U+2665
let sparklingHeart = "\U0001F496"  // 💖, Unicode scalar U+1F496
```

## 빈 문자의 초기화 (Initializing an Empty String)

