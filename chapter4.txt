# 04 기본 연산자

연산자는 값을 확인 변경 합치기 위해 사용하는 특수 기호나 문구입니다. 예를 들어 더하기 연산자(+)는 두 숫자를 더합니다. (`let i = 1 + 2` 과 같이)
더 복잡한 예는 && 논리 AND 연산자 포함합니다. (enteredDoorCode && passedRetinaScan)그리고 증가 연산자인 ++i는 i의 값 1을 증가시키는 축약 연산자입니다.

Swift 는 대부분의 표준 C 연산자를 지원하며 일반적인 코딩 오류를 제거하는 몇가지 기능을 항샹 시켰습니다. 할당연산자 (=)나 equal 연산자(==)를 사용할때 실수를 방지하기 위해 값을 반환하지 않습니다.
산술연산자(+ , - , *, / , % 등)가 오버플로우를 감지하고 그들을 저장하는 유형의 허용된 값의 범위보다 크거나 작아 숫자로 작업할때 예기치 않은 결과를 방지 할 수 있습니다. 
당신은 오버 플로우 연산자에 설명된대로 Swift의 오버플로우 연산자를 사용하여 오버플로 값을 선택할수 있습니다. 

C 와 달리, Swift는 부동 소수점 숫자에 나머지 (%) 계산을 수행 할 수 있습니다. Swift는 또한 2개의 범위 연산자를 제공합니다. (`A..B`) 그리고 (`A...B`) 이며 값의 범위를 표현하기 위한 연산자이고 이것은 C 에서 찾을 수 없습니다.

이 장에서는 Swift의 일반적인 연산자를 설명합니다. 고급 연산자는 고급 연산자(Advanced Operator) 장에 있습니다, 그리고 사용자 정의 연산자를 정의하고 사용자 정의 형식에 대한 표준 연산자를 구현하는 방법에 대해 설명합니다.

## 용어 (Teminology)
연산자는 단항, 이진, 그리고 삼항이 있습니다.

- 단항 연산자는 단일 대상에서 작동합니다. (예 `-a`) 단항 전위 연산자를 바로 앞에 나타내고, (예 !B) 단항 후위 연산자는 타겟이후에 즉시 나타납니다. (예 `i++`)
- 이항 연산자는 두개의 대상에 작동하며 그들의 두 대상 사이에 나타납니다. 왜냐하면 중위연산자입니다. (예 `2 + 3`)
- 삼항 연산자는 세 가지 대상에 작동합니다. C 처럼 , Swift는 하나의 삼항연산자, 삼항 조건 연산자가 (`a ? b : c`)

연산자에 영향을 주는 값은 피연산자 입니다. 식 1 + 2 는 이항 연산자와 두 피연산자의 값은 1과 2입니다.

## 할당 연산자
할당 연산자는 `(a = b)` 초기화 하거나 b 의 값을 a 에 할당하는것이다.
```
let b = 100
var a = 5
a = b
// a 는 이제 10 과 같다.
```

만약 오른쪽이 같은 여러 값을 가진 튜플의 경우, 그 요소는 한번에 여러개의 상수 또는 변수로 분해 될수 있다.
```
let (x, y) = (1, 2)
// x 는 1 과 같다 그리고 y 는 2 와 같다.
```

C 와 Objective-C의 대입 연산자와는 달리, Swift의 대입 연산자 자체가 값을 반환하지 않습니다. 다음 구문은 유효하지 않습니다.
``` 
if x = y {
	// x = y가 값을 반환하지 않기 때문에 이것은 유효하지 않다, 
}
```

이 기능은 실수로 (==) 연산자를 사용하여 막는것은 (=)를 대신 사용하는것을 방지하기 떄문입니다. X = Y 가 유효하지 않게 함으로써 Swift 코드에서 이러한 종류의 오류를 방지하는데 도움이 됩니다.

## 산술 연산자
Swift 는 4가지의 산술연산자가 모든 숫자 타입을 지원합니다.

- 덧셈 (+)
- 뺼셈 (-)
- 곱셈 (*)
- 나눗셈 (/)

```
1 + 2 // 3 과 같다
5 - 3 // 2 와 같다
2 * 3 // 6 과 같다
10.0 / 2.5 // 4.0 과 같다
```
C 및 Objective-C의 산술 연산자와는 달리 Swift 산술 연산자는 값이 기본적으로 오버플로우하는것을 허용하지 않는다. Swift 오버플로우 연산자를 사용하여 값 오버플로 동작을 선택할 수있습니다. 오버플로우 연산자를 참조하십시오. // 링크

또한 덧셈 연산자는 String 문자열을 지원한다.
```
"hello, " + "world" // "hello, world" 와 같다
```

두 개의 Character 값이거나 하나는 Character 값 그리고 하나는 String 값일때 두 개를 함께 더해서 새로운 String 값을 만들 수 있습니다.

```
‘let dog: Character = "🐶"
let cow: Character = "🐮"
let dogCow = dog + cow
// dogCow is equal to "🐶🐮’
```
연속된 String 과 문자 를 또한 참조 바란다. // 링크 

## 나머지 연산자
나머지 연산자는 (`a % b`) b 의 많은 배수가 a에 맞게 곱해지며 그리고 남아 있는 값을 반환합니다. (나머지 라고 불립니다.)

> NOTE   

> 나머지 연산자는 (%) 또한 모듈로 연산으로 다른 언어에 알려져있다. 그러나 Swift에서의 동작은 음수를 의미한다. 엄격히 말하면, 모듈로 연산보다 나머지 연산이다.

여기에 나머지 연산의 동작이 어떻게 되는지 있다. ` 9 % 4 ` 을 계산해보면, 당신은 첫번째로 `4`들을 `9`에 맞게 맞출것이다.
// 이미지 59 페이지

당신은 `4`들을 9에 맞추었고 그리고 나머지는 `1`이다. (오렌지 색깔을 보라)

Swift에서는 이렇게 쓰여진다

		9 % 4 // 1과 같다

a % b 의 답을 측정해보면, % 계산 연산자는 나머지 출력과 = 연산자를 반한단다.

`a = (b x 배수) + 나머지`

b 의 배수가 a 내부의 맞는 가장 큰 수일 경우다.

9 와 4를 대입 할경우

` 9 = (4 X 2) + 1 `// 하루패드 특수문자가...?

a 의 값이 음수 일때도 같은 메소드가 지원되며 나머지 값이 음수가 나온다.

	`-9 % 4 // -1과 같다`

-9와 4를 넣으면 다음 과 같은 식이 나온다.

`-9 = (4 X -2) + -1`

나머지 값이 -1이 주어진다.

## 부동 소수점 나머지 연산
C 와 Objective-C의 나머지 연산과는 달리, Swift의나저미 연산은 부동 소수점 연산 또한 지원합니다.

		`8 % 2.5 // 2.5와 같음`
예를 들어 8을 2.5로 나누었을때 3과 같다 나머지는 0.5와 같다. 그리고 나머지 연산이 반환하는 값은 Double 타입의 0.5이다.

//이미지 60페이지 

## 증가연산자와 감소 연산자
C와 같이, Swift는 증가 연산자(++)와 감소 연산자(--)를 제공한다. 이것은 숫자 변수를 증가시키거나 감소시키는 축약형이다. 정수형과 부동소수점형을 연산자와 같이 사용 가능하다.
```
var i = 0
++i

```
만약 ++i 호출마다, i의 값은 1 씩 증가된다. 기본적으로, ++=i 는 i = i + 1 말의 약어이다. 마찬가지로, --i를 나는 i = i - 1 의 약어로 사용할 수 있습니다.

++ 와 -- 기호는 전위연산자 또는 후위연산자로 사용이 가능합니다. ++i 와 --i는 둘다 i의 값을 1 증가시키는 방법입니다. 비슷하게, --i 와 ++i는 i의 값을 1 감소시키는 방법입니다.

이러한 수정연산자는 i 와 그리고 반환값 까지 변화시킵니다. 만약 i 에 저장된 값을 증가 또는 감소 할 경우, 반환값을 무시 할 수있습니다. 그러나 반환된 값을 사용할 경우, 당신은 다음과 같은 규칙에 따라 접두사 또는 연산자의 후위버전을 사용하는지 여부에 따라 달라집니다.

- 만약 변수 앞에 쓰여질 경우, 값이 증가한 후에 반환된다.
- 반약 변수 뒤에 쓰여질 경우, 값이 반환된 뒤에 증가된다.

예제 코드 (For example:)
```
var a = 0
let b = ++a
// a 그리고 b는 지금 a 둘다 1과 같다.
let c = a++
// a 는 지금 2, 그러나 c는 이전의 값인 1이 이미 설정되어있다.
```

위의 예제코드에서 `let b = ++a` 는 `a`를 반환하기 전에 `a`를 증가시킨다. 이 방법은 a 와 b 하나의 새로운 값이 동등한 이유이다.

그러나, `let c = a++` 는 `a`를 반환한 후에 `a`를 증가시킨다. 이 뜻은 `c`가 없은 값은 예전의 값인 `1`이며 `a`에게는 업데이트 된 `2`와 같다.

당신은 i++의 특정동작을 필요로 하지 않는한, 이것은 당신이 ++i 나 --i를 사용하는것이 좋습니다. 왜냐하면 그것은 모든 경우에 `i`를 수정하고 결과를 반환하는 예상된 동작을 가지기 때문입니다. 

##단항 마이너스 연산자
숫자 값의 부호는 접두어 -를 사용하여 전환할수 있다. 이것은 단항 마이너스 연산자로 알려진것이다.

```
let three = 3
let minusThree = -three // minusThree equal -3
let plusThree = -minusThree // plus equal 3, or "minus minus 		three"
```
단항 마이너스 연산자는 공백없이 작동하는 값 바로 앞에 추가 됩니다.

##단항 플러스 연산자
단항 플러스 연산자(+)는 간단하게 변경하지 않고, 값을 반환합니다.

```
let minusSix = -6
let alsoMinusSix = +minusSix // alsoMinusSix equals -6
```

플러스 연산자가 있음에도 불구하고 실제로 아무것도 하지 않지만, 당신은 또한 단항 마이너스 연산자를 사용하는 경우 양수에 대한 코드대칭에 사용할 수 있습니다.

## 복합 할당 연산자
C와 같이 Swift는 다른 작업에 할당(=)을 결합하는 복합 할당 연산자를 제공합니다. 한 예를 들어 덧셈 할당 연산자입니다 (+=):
```
var a = 1
a += 2
// a 는 3과 같다
```

표현식 `a += 2` 는 `a = a + 2` 의 축약형이다. 효과적으로 한 연산자가 가산 및 할당이 동시에 작업과 결합이 된다.

>NOTE
>
> 복합 할당 연산자는 값을 반환하지 않는다. 당신은 `let b = a += 2` 이러한 코드를 작성할수 없다. 예를 들어 이러한 코드는 위의 증가 및 감소 연산자와는 다릅니다. 

복합 할당 연산자의 전체 목록은 Expressions 에서 찾을 수 있습니다. // 링크

## 비교 연산자
Swift는 C의 정식 비교연산자를 지원합니다.

- 같음 연산자 (`a == b`)
- 같지 않음 연산자 (`a != b`)
- 보다 큰 (`a > b`)
- 보다 작은(`a < b`)
- 보다 크거나 같은 (`a >= b`)
- 보다 작거나 같은 (`a <= b`)

>NOTE
>
>Swift는 또한 두 개체 참조가 동일한 인스턴스 객체를 참조하고 있는지 여부를 테스트 하는 연산자를 지원합니다. (`===` 와 `!==`) 자세한 내영은 Classes and Structures를 참조하십시오 // 링크
